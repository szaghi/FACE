var tipuesearch = {"pages":[{"title":" FACE ","text":"FACE FACE FACE, Fortran Ansi Colors (and Styles) Environment A KISS pure Fortran Library for easy colorize (and stylize) strings. FACE is a pure Fortran (KISS) library; FACE is Fortran 2008+ standard compliant; FACE is tiny; FACE is a Free, Open Source Project. A taste of FACE use face print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'underline_on' ) Issues Compiler Support | What is FACE? | Main features | Copyrights | Documentation | Install | What is FACE? FACE is KISS pure Fortran library for easy colorize (and stylize ) strings: FACE allows for easy handling of Ansi Colors and Styles codes providing a user-friendly Fortran environment … just one function :smile: Main features FACE is a library allowing [x] easy handle of Ansi Colors and Styles Codes ; [x] Test Driven Developed (TDD); [x] collaborative developed; [x] well documented; [x] free! Any feature request is welcome. Go to Top Copyrights FACE is a Free and Open Source Software (FOSS), it is distributed under a very permissive multi-licensing system: selectable licenses are GPLv3 , BSD2-Clause , BSD3-Clause and MIT , feel free to select the license that best matches your workflow. Anyone is interest to use, to develop or to contribute to FACE is welcome. More details can be found on wiki . Go to Top Documentation Besides this README file the FACE documentation is contained into its own wiki . Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool . Usage FACE expose only 3 procedures: colorize the main function; colors_samples an helper subroutine that prints to standard output a sample of all colors available; styles_samples an helper subroutine that prints to standard output a sample of all styles available; The usage is extremely simple, colorize returns an allocatable character with the requested (foreground and background) colors and style, while the 2 helper subroutines have not dummies: use face character ( len = :), allocatable :: error_message error_message = colorize ( 'error:' , color_fg = 'red' , style = 'underline_on' ) // ' file not found!' print '(A)' , error_message print '(A)' , colorize ( 'suggestion: check you configuration' , color_fg = 'blue' ) call colors_samples ! print samples of all colors available call styles_samples ! print samples of all styles available Colorize colorize is the main function used to colorize and stylize the input string. Its signature is: pure function colorize ( string , color_fg , color_bg , style ) result ( colorized ) character ( len =* ), intent ( in ) :: string ! Input string. character ( len =* ), intent ( in ), optional :: color_fg ! Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg ! Background color definition. character ( len =* ), intent ( in ), optional :: style ! Style definition. character ( len = :), allocatable :: colorized ! Colorized string. end function colorize string is the input string; color_fg is the foreground color definition and it is optional; color_bg is the background color definition and it is optional; style is the style definition and it is optional; colors and style definitions are case insensitive ; no warning is returned if the colors or style definitions are wrong (or not available): in case the color or style are simply not applied. Available Colors and Styles Go to Top Install FACE is a Fortran library composed by several modules. Before download and compile the library you must check the requirements . To download and build the project two main ways are available: exploit the install script that can be downloaded here manually download and build : download build install script FACE ships a bash script (downloadable from here ) that is able to automatize the download and build steps. The script install.sh has the following usage: → ./install.sh\nInstall script of FACE\nUsage:\n\ninstall.sh --help | -?\n    Print this usage output and exit install.sh --download | -d <arg> [ --verbose | -v ] Download the project\n\n    --download | -d [ arg ] Download the project, arg = git | wget to download with git or wget respectively\n    --verbose | -v         Output verbose mode activation\n\ninstall.sh --build | -b <arg> [ --verbose | -v ] Build the project\n\n    --build | -b [ arg ] Build the project, arg = fobis | make | cmake to build with FoBiS.py, GNU Make or CMake respectively\n    --verbose | -v      Output verbose mode activation\n\nExamples:\n\ninstall.sh --download git\ninstall.sh --build make\ninstall.sh --download wget --build cmake The script does not cover all possibilities. The script operation modes are 2 ( collapsible into one-single-mode): download a new fresh-clone of the latest master-release by means of: git ; wget (also curl is necessary); build a fresh-clone project as static-linked library by means of: FoBiS.py ; GNU Make ; CMake ; you can mix any of the above combinations accordingly to the tools available. Typical usages are: # download and prepare the project by means of git and build with GNU Make install.sh --dowload git --build make # download and prepare the project by means of wget (curl) and build with CMake install.sh --dowload wget --build cmake # download and prepare the project by means of git and build with FoBiS.py install.sh --dowload git --build fobis manually download and build download To download all the available releases and utilities (fobos, license, readme, etc…), it can be convenient to clone whole the project: git clone https://github.com/szaghi/FACE cd FACE Alternatively, you can directly download a release from GitHub server, see the ChangeLog . build The most easy way to compile FACE is to use FoBiS.py within the provided fobos file. Consequently, it is strongly encouraged to install FoBiS.py . | Build by means of FoBiS | Build by means of GNU Make | Build by means of CMake | build by means of FoBiS FoBiS.py is a KISS tool for automatic building of modern Fortran projects. Providing very few options, FoBiS.py is able to build almost automatically complex Fortran projects with cumbersome inter-modules dependency. This removes the necessity to write complex makefile. Moreover, providing a very simple options file (in the FoBiS.py nomenclature indicated as fobos file) FoBiS.py can substitute the (ab)use of makefile for other project stuffs (build documentations, make project archive, etc…). FACE is shipped with a fobos file that can build the library in both static and shared forms and also build the Test_Driver program. The provided fobos file has several building modes. listing fobos building modes Typing: FoBiS.py build -lmodes the following message should be printed: The fobos file defines the following modes:\n  - \"face-shared-gnu\" - \"face-static-gnu\" - \"tests-gnu\" - \"face-shared-gnu-debug\" - \"face-static-gnu-debug\" - \"tests-gnu-debug\" - \"face-shared-intel\" - \"face-static-intel\" - \"tests-intel\" - \"face-shared-intel-debug\" - \"face-static-intel-debug\" - \"tests-intel-debug\" The modes should be self-explicative: shared , static and test-driver are the modes for building (in release, optimized form) the shared and static versions of the library and the Test Driver program, respectively. The other 3 modes are the same, but in debug form instead of release one. -gnu use the GNU gfortran compiler while -intel the Intel one. building the library The shared or static directories are created accordingly to the form of the library built. The compiled objects and mod files are placed inside this directory, as well as the linked library. release shared library FoBiS.py build -mode face-shared-gnu release static library FoBiS.py build -mode face-static-gnu debug shared library FoBiS.py build -mode face-shared-gnu-debug debug static library FoBiS.py build -mode face-static-gnu-debug building the Test Driver program The Test_Driver directory is created. The compiled objects and mod files are placed inside this directory, as well as the linked program. release test driver program FoBiS.py build -mode tests-gnu debug test driver program FoBiS.py build -mode tests-gnu-debug listing fobos rules Typing: FoBiS.py rule -ls the following message should be printed: The fobos file defines the following rules: The rules should be self-explicative. build by means of GNU Make To be implemented. Build by means of CMake To be implemented. Go to Top Developer Info Stefano Zaghi","tags":"home","loc":"index.html"},{"title":"colorize_ascii – FACE","text":"private pure function colorize_ascii(string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, ASCII kind. Arguments Type Intent Optional Attributes Name character(kind=ASCII,len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(kind=ASCII,len=:),allocatable Colorized string. Calls proc~~colorize_ascii~~CallsGraph proc~colorize_ascii colorize_ascii proc~color_index color_index proc~colorize_ascii->proc~color_index proc~upper upper proc~colorize_ascii->proc~upper proc~style_index style_index proc~colorize_ascii->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code colorize_ascii Source Code pure function colorize_ascii ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, ASCII kind. character ( len =* , kind = ASCII ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :, kind = ASCII ), allocatable :: colorized !< Colorized string. character ( len = :, kind = ASCII ), allocatable :: buffer !< Temporary buffer. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) then buffer = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif endfunction colorize_ascii","tags":"","loc":"proc/colorize_ascii.html"},{"title":"colorize_default – FACE","text":"private pure function colorize_default(string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, DEFAULT kind. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(len=:),allocatable Colorized string. Calls proc~~colorize_default~~CallsGraph proc~colorize_default colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~colorize_default~~CalledByGraph proc~colorize_default colorize_default interface~colorize colorize interface~colorize->proc~colorize_default proc~colors_samples colors_samples proc~colors_samples->interface~colorize program~face_test_colors face_test_colors program~face_test_colors->interface~colorize proc~styles_samples styles_samples proc~styles_samples->interface~colorize program~face_test_styles face_test_styles program~face_test_styles->interface~colorize program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code colorize_default Source Code pure function colorize_default ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, DEFAULT kind. character ( len =* ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :), allocatable :: colorized !< Colorized string. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) colorized = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) colorized = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) colorized = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif endfunction colorize_default","tags":"","loc":"proc/colorize_default.html"},{"title":"colorize_ucs4 – FACE","text":"private pure function colorize_ucs4(string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, UCS4 kind. Arguments Type Intent Optional Attributes Name character(kind=UCS4,len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(kind=UCS4,len=:),allocatable Colorized string. Calls proc~~colorize_ucs4~~CallsGraph proc~colorize_ucs4 colorize_ucs4 proc~color_index color_index proc~colorize_ucs4->proc~color_index proc~upper upper proc~colorize_ucs4->proc~upper proc~style_index style_index proc~colorize_ucs4->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code colorize_ucs4 Source Code pure function colorize_ucs4 ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, UCS4 kind. character ( len =* , kind = UCS4 ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :, kind = UCS4 ), allocatable :: colorized !< Colorized string. character ( len = :, kind = UCS4 ), allocatable :: buffer !< Temporary buffer. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) then buffer = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif endfunction colorize_ucs4","tags":"","loc":"proc/colorize_ucs4.html"},{"title":"color_index – FACE","text":"private elemental function color_index(color) Return the array-index corresponding to the queried color. Note Because Foreground and backround colors lists share the same name, no matter what array is used to find the color index.\nThus, the foreground array is used. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Color definition. Return Value integer(kind=int32) Index into the colors arrays. Called by proc~~color_index~~CalledByGraph proc~color_index color_index proc~colorize_ascii colorize_ascii proc~colorize_ascii->proc~color_index proc~colorize_default colorize_default proc~colorize_default->proc~color_index proc~colorize_ucs4 colorize_ucs4 proc~colorize_ucs4->proc~color_index interface~colorize colorize interface~colorize->proc~colorize_default proc~colors_samples colors_samples proc~colors_samples->interface~colorize program~face_test_colors face_test_colors program~face_test_colors->interface~colorize proc~styles_samples styles_samples proc~styles_samples->interface~colorize program~face_test_styles face_test_styles program~face_test_styles->interface~colorize program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code color_index Source Code elemental function color_index ( color ) !< Return the array-index corresponding to the queried color. !< !< @note Because Foreground and backround colors lists share the same name, no matter what array is used to find the color index. !< Thus, the foreground array is used. character ( len =* ), intent ( in ) :: color !< Color definition. integer ( int32 ) :: color_index !< Index into the colors arrays. integer ( int32 ) :: c !< Counter. color_index = 0 do c = 1 , size ( COLORS_FG , dim = 2 ) if ( trim ( COLORS_FG ( 1 , c )) == trim ( adjustl ( color ))) then color_index = c exit endif enddo endfunction color_index","tags":"","loc":"proc/color_index.html"},{"title":"style_index – FACE","text":"private elemental function style_index(style) Return the array-index corresponding to the queried style. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style definition. Return Value integer(kind=int32) Index into the styles array. Called by proc~~style_index~~CalledByGraph proc~style_index style_index proc~colorize_ascii colorize_ascii proc~colorize_ascii->proc~style_index proc~colorize_default colorize_default proc~colorize_default->proc~style_index proc~colorize_ucs4 colorize_ucs4 proc~colorize_ucs4->proc~style_index interface~colorize colorize interface~colorize->proc~colorize_default proc~colors_samples colors_samples proc~colors_samples->interface~colorize program~face_test_colors face_test_colors program~face_test_colors->interface~colorize proc~styles_samples styles_samples proc~styles_samples->interface~colorize program~face_test_styles face_test_styles program~face_test_styles->interface~colorize program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code style_index Source Code elemental function style_index ( style ) !< Return the array-index corresponding to the queried style. character ( len =* ), intent ( in ) :: style !< Style definition. integer ( int32 ) :: style_index !< Index into the styles array. integer ( int32 ) :: s !< Counter. style_index = 0 do s = 1 , size ( STYLES , dim = 2 ) if ( trim ( STYLES ( 1 , s )) == trim ( adjustl ( style ))) then style_index = s exit endif enddo endfunction style_index","tags":"","loc":"proc/style_index.html"},{"title":"upper – FACE","text":"private elemental function upper(string) Return a string with all uppercase characters. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. Return Value character(len=len) Upper case string. Called by proc~~upper~~CalledByGraph proc~upper upper proc~colorize_ascii colorize_ascii proc~colorize_ascii->proc~upper proc~colorize_default colorize_default proc~colorize_default->proc~upper proc~colorize_ucs4 colorize_ucs4 proc~colorize_ucs4->proc~upper interface~colorize colorize interface~colorize->proc~colorize_default proc~colors_samples colors_samples proc~colors_samples->interface~colorize program~face_test_colors face_test_colors program~face_test_colors->interface~colorize proc~styles_samples styles_samples proc~styles_samples->interface~colorize program~face_test_styles face_test_styles program~face_test_styles->interface~colorize program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code upper Source Code elemental function upper ( string ) !< Return a string with all uppercase characters. character ( len =* ), intent ( in ) :: string !< Input string. character ( len = len ( string )) :: upper !< Upper case string. integer :: n1 !< Characters counter. integer :: n2 !< Characters counter. upper = string do n1 = 1 , len ( string ) n2 = index ( LOWER_ALPHABET , string ( n1 : n1 )) if ( n2 > 0 ) upper ( n1 : n1 ) = UPPER_ALPHABET ( n2 : n2 ) enddo endfunction upper","tags":"","loc":"proc/upper.html"},{"title":"colors_samples – FACE","text":"public subroutine colors_samples() Print to standard output all colors samples. Arguments None Calls proc~~colors_samples~~CallsGraph proc~colors_samples colors_samples interface~colorize colorize proc~colors_samples->interface~colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~colors_samples~~CalledByGraph proc~colors_samples colors_samples program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code colors_samples Source Code subroutine colors_samples () !< Print to standard output all colors samples. integer ( int32 ) :: c !< Counter. print '(A)' , colorize ( 'Foreground colors samples' , color_fg = 'red_intense' ) do c = 1 , size ( COLORS_FG , dim = 2 ) print '(A)' , '  colorize(\"' // COLORS_FG ( 1 , c ) // '\", color_fg=\"' // COLORS_FG ( 1 , c ) // '\") => ' // & colorize ( COLORS_FG ( 1 , c ), color_fg = COLORS_FG ( 1 , c )) // & ' code: ' // colorize ( trim ( COLORS_FG ( 2 , c )), color_fg = COLORS_FG ( 1 , c ), style = 'inverse_on' ) enddo print '(A)' , colorize ( 'Background colors samples' , color_fg = 'red_intense' ) do c = 1 , size ( COLORS_BG , dim = 2 ) print '(A)' , '  colorize(\"' // COLORS_BG ( 1 , c ) // '\", color_bg=\"' // COLORS_BG ( 1 , c ) // '\") => ' // & colorize ( COLORS_BG ( 1 , c ), color_bg = COLORS_BG ( 1 , c )) // & ' code: ' // colorize ( trim ( COLORS_BG ( 2 , c )), color_bg = COLORS_BG ( 1 , c ), style = 'inverse_on' ) enddo endsubroutine colors_samples","tags":"","loc":"proc/colors_samples.html"},{"title":"styles_samples – FACE","text":"public subroutine styles_samples() Print to standard output all styles samples. Arguments None Calls proc~~styles_samples~~CallsGraph proc~styles_samples styles_samples interface~colorize colorize proc~styles_samples->interface~colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~styles_samples~~CalledByGraph proc~styles_samples styles_samples program~face_test_basic face_test_basic program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code styles_samples Source Code subroutine styles_samples () !< Print to standard output all styles samples. integer ( int32 ) :: s !< Counter. print '(A)' , colorize ( 'Styles samples' , color_fg = 'red_intense' ) do s = 1 , size ( STYLES , dim = 2 ) print '(A)' , '  colorize(\"' // STYLES ( 1 , s ) // '\", style=\"' // STYLES ( 1 , s ) // '\") => ' // & colorize ( STYLES ( 1 , s ), style = STYLES ( 1 , s )) // & ' code: ' // colorize ( trim ( STYLES ( 2 , s )), color_fg = 'magenta' , style = 'inverse_on' ) enddo endsubroutine styles_samples","tags":"","loc":"proc/styles_samples.html"},{"title":"colorize – FACE","text":"public interface colorize Calls interface~~colorize~~CallsGraph interface~colorize colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~colorize~~CalledByGraph interface~colorize colorize proc~colors_samples colors_samples proc~colors_samples->interface~colorize program~face_test_colors face_test_colors program~face_test_colors->interface~colorize proc~styles_samples styles_samples proc~styles_samples->interface~colorize program~face_test_styles face_test_styles program~face_test_styles->interface~colorize program~face_test_basic face_test_basic program~face_test_basic->proc~colors_samples program~face_test_basic->proc~styles_samples Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures colorize_default Module Procedures private pure function colorize_default (string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, DEFAULT kind. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(len=:),allocatable Colorized string.","tags":"","loc":"interface/colorize.html"},{"title":"face – FACE","text":"FACE, Fortran Ansi Colors Environment. Uses iso_fortran_env module~~face~~UsesGraph module~face face iso_fortran_env iso_fortran_env module~face->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~face~~UsedByGraph module~face face program~face_test_colors face_test_colors program~face_test_colors->module~face program~face_test_ucs4 face_test_ucs4 program~face_test_ucs4->module~face program~face_test_basic face_test_basic program~face_test_basic->module~face program~face_test_styles face_test_styles program~face_test_styles->module~face Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables ASCII UCS4 UPPER_ALPHABET LOWER_ALPHABET NL ESCAPE CODE_START CODE_END CODE_CLEAR STYLES COLORS_FG COLORS_BG Interfaces colorize Functions colorize_ascii colorize_default colorize_ucs4 color_index style_index upper Subroutines colors_samples styles_samples Variables Type Visibility Attributes Name Initial integer, public, parameter :: ASCII = selected_char_kind('default') ASCII character set kind. integer, public, parameter :: UCS4 = selected_char_kind('default') Unicode character set kind. character(len=26), private, parameter :: UPPER_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' Upper case alphabet. character(len=26), private, parameter :: LOWER_ALPHABET = 'abcdefghijklmnopqrstuvwxyz' Lower case alphabet. character(len=1), private, parameter :: NL = new_line('a') New line character. character(len=1), private, parameter :: ESCAPE = achar(27) “\" character. character(len=2), private, parameter :: CODE_START = ESCAPE//'[' Start ansi code, “[“. character(len=1), private, parameter :: CODE_END = 'm' End ansi code, “m”. character(len=4), private, parameter :: CODE_CLEAR = CODE_START//'0'//CODE_END Clear all styles, “[0m”. character(len=17), private, parameter :: STYLES (1:2,1:16) = reshape(['BOLD_ON          ', '1                ', 'ITALICS_ON       ', '3                ', 'UNDERLINE_ON     ', '4                ', 'INVERSE_ON       ', '7                ', 'STRIKETHROUGH_ON ', '9                ', 'BOLD_OFF         ', '22               ', 'ITALICS_OFF      ', '23               ', 'UNDERLINE_OFF    ', '24               ', 'INVERSE_OFF      ', '27               ', 'STRIKETHROUGH_OFF', '29               ', 'FRAMED_ON        ', '51               ', 'ENCIRCLED_ON     ', '52               ', 'OVERLINED_ON     ', '53               ', 'FRAMED_OFF       ', '54               ', 'ENCIRCLED_OFF    ', '54               ', 'OVERLINED_OFF    ', '55               '], [2, 16]) Styles. character(len=15), private, parameter :: COLORS_FG (1:2,1:17) = reshape(['BLACK          ', '30             ', 'RED            ', '31             ', 'GREEN          ', '32             ', 'YELLOW         ', '33             ', 'BLUE           ', '34             ', 'MAGENTA        ', '35             ', 'CYAN           ', '36             ', 'WHITE          ', '37             ', 'DEFAULT        ', '39             ', 'BLACK_INTENSE  ', '90             ', 'RED_INTENSE    ', '91             ', 'GREEN_INTENSE  ', '92             ', 'YELLOW_INTENSE ', '93             ', 'BLUE_INTENSE   ', '94             ', 'MAGENTA_INTENSE', '95             ', 'CYAN_INTENSE   ', '96             ', 'WHITE_INTENSE  ', '97             '], [2, 17]) Foreground colors. character(len=15), private, parameter :: COLORS_BG (1:2,1:17) = reshape(['BLACK          ', '40             ', 'RED            ', '41             ', 'GREEN          ', '42             ', 'YELLOW         ', '43             ', 'BLUE           ', '44             ', 'MAGENTA        ', '45             ', 'CYAN           ', '46             ', 'WHITE          ', '47             ', 'DEFAULT        ', '49             ', 'BLACK_INTENSE  ', '100            ', 'RED_INTENSE    ', '101            ', 'GREEN_INTENSE  ', '102            ', 'YELLOW_INTENSE ', '103            ', 'BLUE_INTENSE   ', '104            ', 'MAGENTA_INTENSE', '105            ', 'CYAN_INTENSE   ', '106            ', 'WHITE_INTENSE  ', '107            '], [2, 17]) Background colors. Interfaces public interface colorize private pure function colorize_default (string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, DEFAULT kind. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(len=:),allocatable Colorized string. Functions private pure function colorize_ascii (string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, ASCII kind. Arguments Type Intent Optional Attributes Name character(kind=ASCII,len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(kind=ASCII,len=:),allocatable Colorized string. private pure function colorize_default (string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, DEFAULT kind. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(len=:),allocatable Colorized string. private pure function colorize_ucs4 (string, color_fg, color_bg, style) result(colorized) Colorize and stylize strings, UCS4 kind. Arguments Type Intent Optional Attributes Name character(kind=UCS4,len=*), intent(in) :: string Input string. character(len=*), intent(in), optional :: color_fg Foreground color definition. character(len=*), intent(in), optional :: color_bg Background color definition. character(len=*), intent(in), optional :: style Style definition. Return Value character(kind=UCS4,len=:),allocatable Colorized string. private elemental function color_index (color) Return the array-index corresponding to the queried color. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Color definition. Return Value integer(kind=int32) Index into the colors arrays. private elemental function style_index (style) Return the array-index corresponding to the queried style. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style definition. Return Value integer(kind=int32) Index into the styles array. private elemental function upper (string) Return a string with all uppercase characters. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Input string. Return Value character(len=len) Upper case string. Subroutines public subroutine colors_samples () Print to standard output all colors samples. Arguments None public subroutine styles_samples () Print to standard output all styles samples. Arguments None","tags":"","loc":"module/face.html"},{"title":"face_test_colors – FACE","text":"Uses face program~~face_test_colors~~UsesGraph program~face_test_colors face_test_colors module~face face program~face_test_colors->module~face iso_fortran_env iso_fortran_env module~face->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. FACE test. Calls program~~face_test_colors~~CallsGraph program~face_test_colors face_test_colors interface~colorize colorize program~face_test_colors->interface~colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code face_test_colors Source Code program face_test_colors !< FACE test. use face implicit none print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'black' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'red' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'green' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'yellow' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'magenta' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'cyan' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'white' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'default' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'black_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'red_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'green_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'yellow_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'magenta_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'cyan_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'white_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'black' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'red' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'green' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'yellow' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'blue' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'magenta' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'cyan' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'white' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'default' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'black_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'red_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'green_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'yellow_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'blue_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'magenta_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'cyan_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'white_intense' ) endprogram face_test_colors","tags":"","loc":"program/face_test_colors.html"},{"title":"face_test_ucs4 – FACE","text":"Uses face program~~face_test_ucs4~~UsesGraph program~face_test_ucs4 face_test_ucs4 module~face face program~face_test_ucs4->module~face iso_fortran_env iso_fortran_env module~face->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. FACE test. Contents Source Code face_test_ucs4 Source Code program face_test_ucs4 !< FACE test. use face implicit none #ifdef UCS4_SUPPORTED character ( kind = UCS4 , len = :), allocatable :: string_1 !< A string. character ( kind = UCS4 , len = :), allocatable :: string_2 !< A string. character ( kind = UCS4 , len = :), allocatable :: string_3 !< A string. string_1 = colorize ( 'Hello' , color_fg = 'blue' ) string_2 = colorize ( UCS4_ ' ÜÇŞ4' , color_fg = 'red' ) string_3 = colorize ( ' World' , color_fg = 'blue' ) print '(A)' , string_1 // string_2 // string_3 #endif endprogram face_test_ucs4","tags":"","loc":"program/face_test_ucs4.html"},{"title":"face_test_basic – FACE","text":"Uses face program~~face_test_basic~~UsesGraph program~face_test_basic face_test_basic module~face face program~face_test_basic->module~face iso_fortran_env iso_fortran_env module~face->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. FACE test. Calls program~~face_test_basic~~CallsGraph program~face_test_basic face_test_basic proc~colors_samples colors_samples program~face_test_basic->proc~colors_samples proc~styles_samples styles_samples program~face_test_basic->proc~styles_samples interface~colorize colorize proc~colors_samples->interface~colorize proc~styles_samples->interface~colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code face_test_basic Source Code program face_test_basic !< FACE test. use face implicit none call colors_samples call styles_samples endprogram face_test_basic","tags":"","loc":"program/face_test_basic.html"},{"title":"face_test_styles – FACE","text":"Uses face program~~face_test_styles~~UsesGraph program~face_test_styles face_test_styles module~face face program~face_test_styles->module~face iso_fortran_env iso_fortran_env module~face->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. FACE test. Calls program~~face_test_styles~~CallsGraph program~face_test_styles face_test_styles interface~colorize colorize program~face_test_styles->interface~colorize proc~colorize_default colorize_default interface~colorize->proc~colorize_default proc~color_index color_index proc~colorize_default->proc~color_index proc~upper upper proc~colorize_default->proc~upper proc~style_index style_index proc~colorize_default->proc~style_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code face_test_styles Source Code program face_test_styles !< FACE test. use face implicit none print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'bold_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'italics_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'underline_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'inverse_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'strikethrough_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'framed_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'encircled_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'overlined_on' ) endprogram face_test_styles","tags":"","loc":"program/face_test_styles.html"},{"title":"face_test_colors.f90 – FACE","text":"FACE test. This file depends on sourcefile~~face_test_colors.f90~~EfferentGraph sourcefile~face_test_colors.f90 face_test_colors.f90 sourcefile~face.f90 face.F90 sourcefile~face_test_colors.f90->sourcefile~face.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs face_test_colors Source Code face_test_colors.f90 Source Code !< FACE test. program face_test_colors !< FACE test. use face implicit none print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'black' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'red' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'green' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'yellow' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'magenta' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'cyan' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'white' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'default' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'black_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'red_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'green_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'yellow_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'magenta_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'cyan_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'white_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'black' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'red' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'green' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'yellow' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'blue' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'magenta' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'cyan' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'white' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'default' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'black_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'red_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'green_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'yellow_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'blue_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'magenta_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'cyan_intense' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_bg = 'white_intense' ) endprogram face_test_colors","tags":"","loc":"sourcefile/face_test_colors.f90.html"},{"title":"face_test_ucs4.F90 – FACE","text":"FACE test. This file depends on sourcefile~~face_test_ucs4.f90~~EfferentGraph sourcefile~face_test_ucs4.f90 face_test_ucs4.F90 sourcefile~face.f90 face.F90 sourcefile~face_test_ucs4.f90->sourcefile~face.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs face_test_ucs4 Source Code face_test_ucs4.F90 Source Code !< FACE test. program face_test_ucs4 !< FACE test. use face implicit none #ifdef UCS4_SUPPORTED character ( kind = UCS4 , len = :), allocatable :: string_1 !< A string. character ( kind = UCS4 , len = :), allocatable :: string_2 !< A string. character ( kind = UCS4 , len = :), allocatable :: string_3 !< A string. string_1 = colorize ( 'Hello' , color_fg = 'blue' ) string_2 = colorize ( UCS4_ ' ÜÇŞ4' , color_fg = 'red' ) string_3 = colorize ( ' World' , color_fg = 'blue' ) print '(A)' , string_1 // string_2 // string_3 #endif endprogram face_test_ucs4","tags":"","loc":"sourcefile/face_test_ucs4.f90.html"},{"title":"face_test_basic.f90 – FACE","text":"FACE test. This file depends on sourcefile~~face_test_basic.f90~~EfferentGraph sourcefile~face_test_basic.f90 face_test_basic.f90 sourcefile~face.f90 face.F90 sourcefile~face_test_basic.f90->sourcefile~face.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs face_test_basic Source Code face_test_basic.f90 Source Code !< FACE test. program face_test_basic !< FACE test. use face implicit none call colors_samples call styles_samples endprogram face_test_basic","tags":"","loc":"sourcefile/face_test_basic.f90.html"},{"title":"face_test_styles.f90 – FACE","text":"FACE test. This file depends on sourcefile~~face_test_styles.f90~~EfferentGraph sourcefile~face_test_styles.f90 face_test_styles.f90 sourcefile~face.f90 face.F90 sourcefile~face_test_styles.f90->sourcefile~face.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs face_test_styles Source Code face_test_styles.f90 Source Code !< FACE test. program face_test_styles !< FACE test. use face implicit none print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'bold_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'italics_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'underline_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'inverse_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'strikethrough_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'framed_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'encircled_on' ) print '(A)' , colorize ( 'Hello' , color_fg = 'red' ) // colorize ( ' World' , color_fg = 'blue' , style = 'overlined_on' ) endprogram face_test_styles","tags":"","loc":"sourcefile/face_test_styles.f90.html"},{"title":"face.F90 – FACE","text":"FACE, Fortran Ansi Colors Environment. Files dependent on this one sourcefile~~face.f90~~AfferentGraph sourcefile~face.f90 face.F90 sourcefile~face_test_colors.f90 face_test_colors.f90 sourcefile~face_test_colors.f90->sourcefile~face.f90 sourcefile~face_test_styles.f90 face_test_styles.f90 sourcefile~face_test_styles.f90->sourcefile~face.f90 sourcefile~face_test_ucs4.f90 face_test_ucs4.F90 sourcefile~face_test_ucs4.f90->sourcefile~face.f90 sourcefile~face_test_basic.f90 face_test_basic.f90 sourcefile~face_test_basic.f90->sourcefile~face.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules face Source Code face.F90 Source Code !< FACE, Fortran Ansi Colors Environment. module face !< FACE, Fortran Ansi Colors Environment. use , intrinsic :: iso_fortran_env , only : int32 implicit none private public :: colorize public :: colors_samples public :: styles_samples public :: ASCII public :: UCS4 interface colorize #if defined ASCII_SUPPORTED && defined ASCII_NEQ_DEFAULT module procedure colorize_ascii module procedure colorize_default #else module procedure colorize_default #endif #ifdef UCS4_SUPPORTED module procedure colorize_ucs4 #endif endinterface ! kind parameters #ifdef ASCII_SUPPORTED integer , parameter :: ASCII = selected_char_kind ( 'ascii' ) !< ASCII character set kind. #else integer , parameter :: ASCII = selected_char_kind ( 'default' ) !< ASCII character set kind. #endif #ifdef UCS4_SUPPORTED integer , parameter :: UCS4 = selected_char_kind ( 'iso_10646' ) !< Unicode character set kind. #else integer , parameter :: UCS4 = selected_char_kind ( 'default' ) !< Unicode character set kind. #endif ! parameters character ( 26 ), parameter :: UPPER_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' !< Upper case alphabet. character ( 26 ), parameter :: LOWER_ALPHABET = 'abcdefghijklmnopqrstuvwxyz' !< Lower case alphabet. character ( 1 ), parameter :: NL = new_line ( 'a' ) !< New line character. character ( 1 ), parameter :: ESCAPE = achar ( 27 ) !< \"\\\" character. ! codes character ( 2 ), parameter :: CODE_START = ESCAPE // '[' !< Start ansi code, \"\". character ( 1 ), parameter :: CODE_END = 'm' !< End ansi code, \"m\". character ( 4 ), parameter :: CODE_CLEAR = CODE_START // '0' // CODE_END !< Clear all styles, \"0m\". ! styles codes character ( 17 ), parameter :: STYLES ( 1 : 2 , 1 : 16 ) = reshape ([& 'BOLD_ON          ' , '1                ' , & !  Bold on. 'ITALICS_ON       ' , '3                ' , & !  Italics on. 'UNDERLINE_ON     ' , '4                ' , & !  Underline on. 'INVERSE_ON       ' , '7                ' , & !  Inverse on: reverse foreground and background colors. 'STRIKETHROUGH_ON ' , '9                ' , & !  Strikethrough on. 'BOLD_OFF         ' , '22               ' , & !  Bold off. 'ITALICS_OFF      ' , '23               ' , & !  Italics off. 'UNDERLINE_OFF    ' , '24               ' , & !  Underline off. 'INVERSE_OFF      ' , '27               ' , & !  Inverse off: reverse foreground and background colors. 'STRIKETHROUGH_OFF' , '29               ' , & !  Strikethrough off. 'FRAMED_ON        ' , '51               ' , & !  Framed on. 'ENCIRCLED_ON     ' , '52               ' , & !  Encircled on. 'OVERLINED_ON     ' , '53               ' , & !  Overlined on. 'FRAMED_OFF       ' , '54               ' , & !  Framed off. 'ENCIRCLED_OFF    ' , '54               ' , & !  Encircled off. 'OVERLINED_OFF    ' , '55               ' & !  Overlined off. ], [ 2 , 16 ]) !< Styles. ! colors codes character ( 15 ), parameter :: COLORS_FG ( 1 : 2 , 1 : 17 ) = reshape ([& 'BLACK          ' , '30             ' , & !  Black. 'RED            ' , '31             ' , & !  Red. 'GREEN          ' , '32             ' , & !  Green. 'YELLOW         ' , '33             ' , & !  Yellow. 'BLUE           ' , '34             ' , & !  Blue. 'MAGENTA        ' , '35             ' , & !  Magenta. 'CYAN           ' , '36             ' , & !  Cyan. 'WHITE          ' , '37             ' , & !  White. 'DEFAULT        ' , '39             ' , & !  Default (white). 'BLACK_INTENSE  ' , '90             ' , & !  Black intense. 'RED_INTENSE    ' , '91             ' , & !  Red intense. 'GREEN_INTENSE  ' , '92             ' , & !  Green intense. 'YELLOW_INTENSE ' , '93             ' , & !  Yellow intense. 'BLUE_INTENSE   ' , '94             ' , & !  Blue intense. 'MAGENTA_INTENSE' , '95             ' , & !  Magenta intense. 'CYAN_INTENSE   ' , '96             ' , & !  Cyan intense. 'WHITE_INTENSE  ' , '97             ' & !  White intense. ], [ 2 , 17 ]) !< Foreground colors. character ( 15 ), parameter :: COLORS_BG ( 1 : 2 , 1 : 17 ) = reshape ([& 'BLACK          ' , '40             ' , & !  Black. 'RED            ' , '41             ' , & !  Red. 'GREEN          ' , '42             ' , & !  Green. 'YELLOW         ' , '43             ' , & !  Yellow. 'BLUE           ' , '44             ' , & !  Blue. 'MAGENTA        ' , '45             ' , & !  Magenta. 'CYAN           ' , '46             ' , & !  Cyan. 'WHITE          ' , '47             ' , & !  White. 'DEFAULT        ' , '49             ' , & !  Default (black). 'BLACK_INTENSE  ' , '100            ' , & !  Black intense. 'RED_INTENSE    ' , '101            ' , & !  Red intense. 'GREEN_INTENSE  ' , '102            ' , & !  Green intense. 'YELLOW_INTENSE ' , '103            ' , & !  Yellow intense. 'BLUE_INTENSE   ' , '104            ' , & !  Blue intense. 'MAGENTA_INTENSE' , '105            ' , & !  Magenta intense. 'CYAN_INTENSE   ' , '106            ' , & !  Cyan intense. 'WHITE_INTENSE  ' , '107            ' & !  White intense. ], [ 2 , 17 ]) !< Background colors. contains ! public procedures subroutine colors_samples () !< Print to standard output all colors samples. integer ( int32 ) :: c !< Counter. print '(A)' , colorize ( 'Foreground colors samples' , color_fg = 'red_intense' ) do c = 1 , size ( COLORS_FG , dim = 2 ) print '(A)' , '  colorize(\"' // COLORS_FG ( 1 , c ) // '\", color_fg=\"' // COLORS_FG ( 1 , c ) // '\") => ' // & colorize ( COLORS_FG ( 1 , c ), color_fg = COLORS_FG ( 1 , c )) // & ' code: ' // colorize ( trim ( COLORS_FG ( 2 , c )), color_fg = COLORS_FG ( 1 , c ), style = 'inverse_on' ) enddo print '(A)' , colorize ( 'Background colors samples' , color_fg = 'red_intense' ) do c = 1 , size ( COLORS_BG , dim = 2 ) print '(A)' , '  colorize(\"' // COLORS_BG ( 1 , c ) // '\", color_bg=\"' // COLORS_BG ( 1 , c ) // '\") => ' // & colorize ( COLORS_BG ( 1 , c ), color_bg = COLORS_BG ( 1 , c )) // & ' code: ' // colorize ( trim ( COLORS_BG ( 2 , c )), color_bg = COLORS_BG ( 1 , c ), style = 'inverse_on' ) enddo endsubroutine colors_samples subroutine styles_samples () !< Print to standard output all styles samples. integer ( int32 ) :: s !< Counter. print '(A)' , colorize ( 'Styles samples' , color_fg = 'red_intense' ) do s = 1 , size ( STYLES , dim = 2 ) print '(A)' , '  colorize(\"' // STYLES ( 1 , s ) // '\", style=\"' // STYLES ( 1 , s ) // '\") => ' // & colorize ( STYLES ( 1 , s ), style = STYLES ( 1 , s )) // & ' code: ' // colorize ( trim ( STYLES ( 2 , s )), color_fg = 'magenta' , style = 'inverse_on' ) enddo endsubroutine styles_samples ! private procedures pure function colorize_ascii ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, ASCII kind. character ( len =* , kind = ASCII ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :, kind = ASCII ), allocatable :: colorized !< Colorized string. character ( len = :, kind = ASCII ), allocatable :: buffer !< Temporary buffer. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) then buffer = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif endfunction colorize_ascii pure function colorize_default ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, DEFAULT kind. character ( len =* ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :), allocatable :: colorized !< Colorized string. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) colorized = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) colorized = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) colorized = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END // colorized // CODE_CLEAR endif endfunction colorize_default pure function colorize_ucs4 ( string , color_fg , color_bg , style ) result ( colorized ) !< Colorize and stylize strings, UCS4 kind. character ( len =* , kind = UCS4 ), intent ( in ) :: string !< Input string. character ( len =* ), intent ( in ), optional :: color_fg !< Foreground color definition. character ( len =* ), intent ( in ), optional :: color_bg !< Background color definition. character ( len =* ), intent ( in ), optional :: style !< Style definition. character ( len = :, kind = UCS4 ), allocatable :: colorized !< Colorized string. character ( len = :, kind = UCS4 ), allocatable :: buffer !< Temporary buffer. integer ( int32 ) :: i !< Counter. colorized = string if ( present ( color_fg )) then i = color_index ( upper ( color_fg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_FG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( color_bg )) then i = color_index ( upper ( color_bg )) if ( i > 0 ) then buffer = CODE_START // trim ( COLORS_BG ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif if ( present ( style )) then i = style_index ( upper ( style )) if ( i > 0 ) then buffer = CODE_START // trim ( STYLES ( 2 , i )) // CODE_END colorized = buffer // colorized buffer = CODE_CLEAR colorized = colorized // buffer endif endif endfunction colorize_ucs4 elemental function color_index ( color ) !< Return the array-index corresponding to the queried color. !< !< @note Because Foreground and backround colors lists share the same name, no matter what array is used to find the color index. !< Thus, the foreground array is used. character ( len =* ), intent ( in ) :: color !< Color definition. integer ( int32 ) :: color_index !< Index into the colors arrays. integer ( int32 ) :: c !< Counter. color_index = 0 do c = 1 , size ( COLORS_FG , dim = 2 ) if ( trim ( COLORS_FG ( 1 , c )) == trim ( adjustl ( color ))) then color_index = c exit endif enddo endfunction color_index elemental function style_index ( style ) !< Return the array-index corresponding to the queried style. character ( len =* ), intent ( in ) :: style !< Style definition. integer ( int32 ) :: style_index !< Index into the styles array. integer ( int32 ) :: s !< Counter. style_index = 0 do s = 1 , size ( STYLES , dim = 2 ) if ( trim ( STYLES ( 1 , s )) == trim ( adjustl ( style ))) then style_index = s exit endif enddo endfunction style_index elemental function upper ( string ) !< Return a string with all uppercase characters. character ( len =* ), intent ( in ) :: string !< Input string. character ( len = len ( string )) :: upper !< Upper case string. integer :: n1 !< Characters counter. integer :: n2 !< Characters counter. upper = string do n1 = 1 , len ( string ) n2 = index ( LOWER_ALPHABET , string ( n1 : n1 )) if ( n2 > 0 ) upper ( n1 : n1 ) = UPPER_ALPHABET ( n2 : n2 ) enddo endfunction upper endmodule face","tags":"","loc":"sourcefile/face.f90.html"}]}